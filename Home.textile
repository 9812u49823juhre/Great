h3. Help code DuckDuckGo

A lot of people ask if they can help code DuckDuckGo? Yes! But how?  This document attempts to answer that question.

First, know that we have way more to do than we can handle internally. So any help is greatly appreciated. Chances are anything you do will quickly go live and so it is pretty easy to have a real impact on the search engine.

Most of DuckDuckGo is closed source, but a growing portion is "open":http://github.com/duckduckgo. We don't think it is right to ask volunteers to contribute to closed source, so what we propose here will also be open. However, if you want to work on the closed portion, there is opportunity for that as well.

You can contact us at "open@duckduckgo.com":mailto:open@duckduckgo.com

The main area we could use help with is *Zero-click Info.* That's the stuff that appears above the traditional links and provides instant answers, topic summaries, etc. Basically, we want more of it and want what we have to be better!

You may have a particular niche type of search you like to do, e.g. electronics parts, and you may have great ideas for the right 0-click source and information we should be displaying for that niche. If so, that's awesome. If you'd like to work on that, we'd love to support you in that effort.

Otherwise, we have a list of our own of things we know would make good improvements and are instant projects to work on. These fall into three categories based on what is involved.

* *Getting data dumps.* A lot of our zero-click info comes from essentially static data dumps, usually achieved through Web scraping (but could also originate from another data dump from the underlying provider). For example, our "programming documentation":http://duckduckgo.com/?q=perl+split mainly comes from Web scraping done by "@boyter":http://twitter.com/boyter. Two open examples are the "launchpad scraper":https://github.com/duckduckgo/Launchpad made by "@crazedpsyc":http://twitter.com/crazedpsyc and the "lyricsmode scraper":https://github.com/duckduckgo/lyrics made by "@dhruvbird". 
This category of 0-click involves getting the data (through scraping or from a dump) and then putting it in a form we can use. You could really do it in any language. Most of our stuff internally is in Perl, and the above to examples are in Python.
Here are some data/sites we would like to see.
** More programming documentation/reference - see our current list on the "tech goodies page":http://duckduckgo.com/tech.html (right column).
** ISO codes 
** "Macupdate.com":http://macupdate.com
** "Iusethis.com":http://iusethis.com
** New lyrics providers, given LyricsMode has too many pop-ups and requires JS to view.

* *Using external APIs.* For 0-click that changes a lot, e.g. weather, or which requires a lot of on-the-fly processing, e.g. WolframAlpha, we use external APIs and integrate them into search results in real-time. Working on this component involves writing some JS that we would call at the appropriate time. What you would do is receive the object from the external API, massage it to extract the parts useful for 0-click, and then call an internal function to display it. 
There are both standard functions to call for standard display and then there are cases where the JS creates the HTML on the fly and it gets inserted into the right div. 
There are a ton of good APIs out there that we'd like to integrate, including the following.
** "TMDb":http://api.themoviedb.org/2.1 - so we can show better movie info, like trailers.
** "SoundCloud":http://developers.soundcloud.com/ - so we can let people hear music
** "alternativeTo":http://alternativeto.net/api - so we can display cool related topics for software
** pronunciation, possibly via "Forvo":http://www.forvo.com/
** Bitcoin conversion, possibly via [[http://bitcoincharts.com/about/markets-api/]] or [[https://mtgox.com/code/data/ticker.php]]
** Latest "xkcd":http://xkcd.com
** "Qype":http://www.qype.co.uk/developers/api - like our "Yelp stuff":http://duckduckgo.com/?q=black+lab+bistro but for UK & Europe.
** Part numbers, possibly via "Octopart":http://octopart.com/api/overview
** "Khan academy":https://sites.google.com/a/khanacademy.org/forge/for-developers/technical/api

* *Goodies.* For some 0-click we don't use any source but ourselves :). These range from "cheat sheets":http://duckduckgo.com/?q=html+chars to "tools":http://duckduckgo.com/?q=pw to "info":http://duckduckgo.com/?q=%23564. Cheat sheets can be an external HTML file we call via an iFrame but the processing goodies are written in Perl since they get inserted into our core processing engine. Often there are existing Perl modules that will do things, which are ripe for Goodies. There are lots of Goodie ideas out there including the following.
** em to px converter 
** spelling corrector. We have spelling now but this would be more an explicit attempt to think of alternatives.
** rhyming dictionary.
** throw dice.
** three way choice, expanding on our "two way now":http://duckduckgo.com/?q=yes+or+no.

* *When to call 0-click.* For each piece of 0-click info, we have to know when to call it. For the static (data dumps) we have a system that does this pretty well. For the dynamic (APIs and goodies) we have a number of schemes to determine when they get called depending on the situation, e.g. "pieces of regexp":https://duckduckgo.com/walpha.html, hashes or more complicated one-off query processing. This area can always be improved, usually by expanding its scope for a particular source such that we get more 0-click coverage without many false positives.
** A major example here is finding more of WolframAlpha we can use, and there is a lot more!

* *Other open stuff.* In addition to the 0-click stuff, there are other things that are open that might spark your interest.
** Logos. We'd love "more logos":http://duckduckgo.com/logos.html for various holidays. We have "a repository":https://github.com/duckduckgo/logos that contains base source files. To make this really easy, just make the logo "the right size":http://duckduckgo.com/nduck.v104.png (with the words - 200x132) so we can use them as a drop-in replacement.
** Mobile logos. None of the above logos are "formatted for mobile":http://duckduckgo.com/nduck.v105.mobile.png. It is a repetitive task, but if you'd like to make some mobile versions of the "existing specialty logos":http://duckduckgo.com/logos.html that would be awesome and next time we put them up we can use both versions.
** API helper libaries. More libraries (in your favorite language) to use our "0-click API":http://api.duckduckgo.com/
** Themes. We're working on a dark theme, but could use other ideas. Ultimately, we'd like to have a theme collection.
** Grouping settings. We have "a lot of settings":http://duckduckgo.com/settings.html, which is great, but they can get overwhelming. We have a thought to offer collections of these so you could get the widescreen or minimal or whatever version and it would change a bunch at once. Determining good sets of collections would be very useful.